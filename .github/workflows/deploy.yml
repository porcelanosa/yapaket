name: Deploy to Production

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy to yapaket.ru
    runs-on: ubuntu-latest

    steps:
      # ============================================
      # 1. CHECKOUT CODE
      # ============================================
      - name: üì• Checkout code
        uses: actions/checkout@v4

      # ============================================
      # 2. SETUP PHP 8.4
      # ============================================
      - name: üêò Setup PHP 8.4
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, zip, pdo_mysql, zip, exif, pdo
          tools: composer:v2

      # ============================================
      # 3. SETUP NODE.JS
      # ============================================
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # ============================================
      # 4. INSTALL COMPOSER DEPENDENCIES
      # ============================================
      - name: üìö Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist

      # ============================================
      # 5. INSTALL NPM DEPENDENCIES
      # ============================================
      - name: üì¶ Install NPM dependencies
        run: npm ci

      # ============================================
      # 6. BUILD FRONTEND ASSETS
      # ============================================
      - name: üî® Build frontend assets
        run: npm run build

      # ============================================
      # 7. CREATE DEPLOYMENT ARCHIVE
      # ============================================
      - name: üì¶ Create deployment archive
        run: |
          echo "Creating deployment archive..."
          tar -czf ../deploy.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='.junie' \
            --exclude='.vscode' \
            --exclude='node_modules' \
            --exclude='.env' \
            --exclude='.env.example' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/data/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/views/*' \
            --exclude='tests' \
            --exclude='.gitignore' \
            --exclude='.gitattributes' \
            --exclude='phpunit.xml' \
            --exclude='README.md' \
            --exclude='package.json' \
            --exclude='package-lock.json' \
            --exclude='vite.config.js' \
            --exclude='tailwind.config.js' \
            --exclude='postcss.config.js' \
            --exclude='eslint.config.js' \
            --exclude='components.json' \
            --exclude='.mcp.json' \
            --exclude='.prettierrc' \
            --exclude='.prettierignore' \
            --exclude='.editorconfig' \
            --exclude='yapaket.local.key.pem' \
            --exclude='yapaket.local.pem' \
            --exclude='docs' \
            .
          mv ../deploy.tar.gz ./deploy.tar.gz
          echo "‚úÖ Archive created successfully"
          ls -lh deploy.tar.gz

      # ============================================
      # 8. SETUP SSH
      # ============================================
      - name: üîë Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # ============================================
      # 9. UPLOAD TO SERVER
      # ============================================
      - name: üöÄ Upload files to server
        run: |
          echo "Uploading deployment archive..."
          scp -o HostKeyAlgorithms=+ssh-rsa -P ${{ secrets.SSH_PORT }} -i ~/.ssh/deploy_key deploy.tar.gz ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/tmp/yapaket-deploy.tar.gz
          echo "‚úÖ Upload completed"

      # ============================================
      # 10. DEPLOY ON SERVER
      # ============================================
      - name: üéØ Deploy application on server
        run: |
          ssh -o HostKeyAlgorithms=+ssh-rsa -p ${{ secrets.SSH_PORT }} -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'ENDSSH'
            set -e
          
            echo "================================================"
            echo "üöÄ Starting deployment to yapaket.ru"
            echo "================================================"
          
            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            BACKUP_DIR="${DEPLOY_PATH}/backups"
          
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
            mkdir -p ${BACKUP_DIR}
          
            # ============================================
            # BACKUP CURRENT VERSION
            # ============================================
            echo ""
            echo "üì¶ Creating backup of current version..."
            if [ -f "${DEPLOY_PATH}/composer.json" ]; then
              cd ${DEPLOY_PATH}
              tar -czf ${BACKUP_DIR}/backup-${TIMESTAMP}.tar.gz \
                --exclude='storage/logs/*' \
                --exclude='storage/framework/cache/*' \
                --exclude='storage/framework/sessions/*' \
                --exclude='storage/framework/views/*' \
                --exclude='vendor' \
                --exclude='node_modules' \
                . 2>/dev/null || echo "‚ö†Ô∏è  Backup skipped (first deploy?)"
              echo "‚úÖ Backup created: backup-${TIMESTAMP}.tar.gz"
          
              # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
              cd ${BACKUP_DIR}
              ls -t backup-*.tar.gz | tail -n +6 | xargs -r rm
              echo "‚úÖ Old backups cleaned"
            else
              echo "‚ö†Ô∏è  No existing installation found, skipping backup"
            fi
          
            # ============================================
            # EXTRACT NEW VERSION
            # ============================================
            echo ""
            echo "üìÇ Extracting new version..."
            cd ${DEPLOY_PATH}
          
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
            if [ -f ".env" ]; then
              cp .env /tmp/.env.backup
              echo "‚úÖ .env backed up"
            fi
          
            if [ -d "storage" ]; then
              mkdir -p /tmp/storage-backup
              cp -r storage/app /tmp/storage-backup/ 2>/dev/null || true
              cp -r storage/logs /tmp/storage-backup/ 2>/dev/null || true
              echo "‚úÖ storage backed up"
            fi
          
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            tar -xzf /tmp/yapaket-deploy.tar.gz -C ${DEPLOY_PATH}
            rm /tmp/yapaket-deploy.tar.gz
            echo "‚úÖ New version extracted"
          
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
            if [ -f "/tmp/.env.backup" ]; then
              mv /tmp/.env.backup ${DEPLOY_PATH}/.env
              echo "‚úÖ .env restored"
            fi
          
            if [ -d "/tmp/storage-backup/app" ]; then
              cp -r /tmp/storage-backup/app/* ${DEPLOY_PATH}/storage/app/ 2>/dev/null || true
              echo "‚úÖ storage/app restored"
            fi
          
            if [ -d "/tmp/storage-backup/logs" ]; then
              cp -r /tmp/storage-backup/logs/* ${DEPLOY_PATH}/storage/logs/ 2>/dev/null || true
              echo "‚úÖ storage/logs restored"
            fi
          
            rm -rf /tmp/storage-backup
          
            # ============================================
            # SET PERMISSIONS
            # ============================================
            echo ""
            echo "üîí Setting permissions..."
            cd ${DEPLOY_PATH}
          
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            mkdir -p storage/framework/cache/data
            mkdir -p storage/framework/sessions
            mkdir -p storage/framework/views
            mkdir -p storage/logs
            mkdir -p bootstrap/cache
          
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
            chmod -R 755 storage bootstrap/cache
            chmod -R 775 storage/framework
            chmod -R 775 storage/logs
          
            echo "‚úÖ Permissions set"
          
            # ============================================
            # RUN LARAVEL COMMANDS
            # ============================================
            echo ""
            echo "‚öôÔ∏è  Running Laravel commands..."
            cd ${DEPLOY_PATH}
          
            # –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è storage (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            if [ ! -L "public/storage" ]; then
              php artisan storage:link
              echo "‚úÖ Storage link created"
            fi
          
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            php artisan migrate --force
            echo "‚úÖ Migrations completed"
          
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à
            php artisan cache:clear
            php artisan config:clear
            php artisan route:clear
            php artisan view:clear
            echo "‚úÖ Cache cleared"
          
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–µ—à
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            echo "‚úÖ Cache optimized"
          
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è autoloader
            composer dump-autoload --optimize --no-dev
            echo "‚úÖ Autoloader optimized"
          
            # ============================================
            # RELOAD PHP-FPM (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
            # ============================================
            echo ""
            echo "üîÑ Reloading PHP-FPM..."
            if command -v systemctl &> /dev/null; then
              if sudo -n systemctl reload php8.4-fpm 2>/dev/null; then
                echo "‚úÖ PHP-FPM reloaded"
              else
                echo "‚ö†Ô∏è  PHP-FPM reload skipped (no sudo access)"
              fi
            else
              echo "‚ö†Ô∏è  systemctl not available, skipping PHP-FPM reload"
            fi
          
            # ============================================
            # CLEANUP
            # ============================================
            echo ""
            echo "üßπ Cleaning up..."
            cd ${DEPLOY_PATH}
          
            # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
            rm -f deploy.tar.gz
            rm -rf tests
            rm -f phpunit.xml
          
            echo "‚úÖ Cleanup completed"
          
            echo ""
            echo "================================================"
            echo "‚úÖ Deployment completed successfully!"
            echo "================================================"
            echo ""
            echo "üìä Deployment info:"
            echo "  - Timestamp: ${TIMESTAMP}"
            echo "  - Deploy path: ${DEPLOY_PATH}"
            echo "  - Backup: ${BACKUP_DIR}/backup-${TIMESTAMP}.tar.gz"
            echo ""
            echo "üåê Website: https://yapaket.ru"
            echo ""
          ENDSSH

      # ============================================
      # 11. VERIFY DEPLOYMENT
      # ============================================
      - name: ‚úÖ Verify deployment
        run: |
          echo "Checking website status..."
          HTTP_CODE=$(curl -o /dev/null -s -w "%{http_code}\n" https://yapaket.ru)
          if [ "$HTTP_CODE" == "200" ] || [ "$HTTP_CODE" == "301" ] || [ "$HTTP_CODE" == "302" ]; then
            echo "‚úÖ Website is accessible (HTTP $HTTP_CODE)"
          else
            echo "‚ö†Ô∏è  Website returned HTTP $HTTP_CODE"
          fi

      # ============================================
      # 12. NOTIFY SUCCESS
      # ============================================
      - name: üéâ Deployment successful
        run: |
          echo "================================================"
          echo "üéâ DEPLOYMENT SUCCESSFUL!"
          echo "================================================"
          echo ""
          echo "üåê Website: https://yapaket.ru"
          echo "üìÖ Date: $(date)"
          echo "üìù Commit: ${{ github.sha }}"
          echo ""