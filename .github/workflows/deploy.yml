name: Deploy to Production

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy to yapaket.ru
    runs-on: ubuntu-latest

    steps:
      # ============================================
      # 1. CHECKOUT CODE
      # ============================================
      - name: üì• Checkout code
        uses: actions/checkout@v4

      # ============================================
      # 2. SETUP PHP 8.4
      # ============================================
      - name: üêò Setup PHP 8.4
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, zip, exif, pdo
          tools: composer:v2

      # ============================================
      # 3. SETUP NODE.JS
      # ============================================
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # ============================================
      # 4. INSTALL COMPOSER DEPENDENCIES
      # ============================================
      - name: üìö Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist

      # ============================================
      # 5. INSTALL NPM DEPENDENCIES
      # ============================================
      - name: üì¶ Install NPM dependencies
        run: npm ci

      # ============================================
      # 6. BUILD FRONTEND ASSETS
      # ============================================
      - name: üî® Build frontend assets
        run: npm run build

      # ============================================
      # 7. CREATE DEPLOYMENT ARCHIVES
      # ============================================
      - name: üì¶ Create deployment archives
        run: |
          echo "Creating deployment archives..."
          
          # –ê—Ä—Ö–∏–≤ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–≤—Å—ë –∫—Ä–æ–º–µ public)
          tar -czf ../app.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='.junie' \
            --exclude='.vscode' \
            --exclude='node_modules' \
            --exclude='.env' \
            --exclude='.env.example' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/data/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/views/*' \
            --exclude='tests' \
            --exclude='.gitignore' \
            --exclude='.gitattributes' \
            --exclude='phpunit.xml' \
            --exclude='README.md' \
            --exclude='package.json' \
            --exclude='package-lock.json' \
            --exclude='vite.config.js' \
            --exclude='tailwind.config.js' \
            --exclude='postcss.config.js' \
            --exclude='eslint.config.js' \
            --exclude='components.json' \
            --exclude='.mcp.json' \
            --exclude='.prettierrc' \
            --exclude='.prettierignore' \
            --exclude='.editorconfig' \
            --exclude='yapaket.local.key.pem' \
            --exclude='yapaket.local.pem' \
            --exclude='public' \
            .
          
          # –ê—Ä—Ö–∏–≤ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ public (–±—É–¥–µ—Ç –≤ docs)
          tar -czf ../public.tar.gz public/
          
          mv ../app.tar.gz ./app.tar.gz
          mv ../public.tar.gz ./public.tar.gz
          
          echo "‚úÖ Archives created successfully"
          ls -lh app.tar.gz public.tar.gz

      # ============================================
      # 8. SETUP SSH
      # ============================================
      - name: üîë Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # ============================================
      # 9. UPLOAD TO SERVER
      # ============================================
      - name: üöÄ Upload files to server
        run: |
          echo "Uploading deployment archives..."
          scp -o HostKeyAlgorithms=+ssh-rsa -P ${{ secrets.SSH_PORT }} -i ~/.ssh/deploy_key app.tar.gz ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/tmp/yapaket-app.tar.gz
          scp -o HostKeyAlgorithms=+ssh-rsa -P ${{ secrets.SSH_PORT }} -i ~/.ssh/deploy_key public.tar.gz ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/tmp/yapaket-public.tar.gz
          echo "‚úÖ Upload completed"

      # ============================================
      # 10. DEPLOY ON SERVER
      # ============================================
      - name: üéØ Deploy application on server
        run: |
          ssh -o HostKeyAlgorithms=+ssh-rsa -p ${{ secrets.SSH_PORT }} -i ~/.ssh/deploy_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'ENDSSH'
            set -e
          
            echo "================================================"
            echo "üöÄ Starting deployment to yapaket.ru"
            echo "================================================"
          
            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            APP_PATH="/home/youprint/yapaket.ru"
            DOCS_PATH="/home/youprint/yapaket.ru/docs"
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            BACKUP_DIR="${APP_PATH}/backups"
          
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            mkdir -p ${BACKUP_DIR}
            mkdir -p ${DOCS_PATH}
          
            # ============================================
            # BACKUP CURRENT VERSION
            # ============================================
            echo ""
            echo "üì¶ Creating backup of current version..."
            if [ -f "${APP_PATH}/composer.json" ]; then
              cd ${APP_PATH}
              tar -czf ${BACKUP_DIR}/backup-app-${TIMESTAMP}.tar.gz \
                --exclude='storage/logs/*' \
                --exclude='storage/framework/cache/*' \
                --exclude='storage/framework/sessions/*' \
                --exclude='storage/framework/views/*' \
                --exclude='vendor' \
                --exclude='node_modules' \
                --exclude='docs' \
                --exclude='backups' \
                . 2>/dev/null || echo "‚ö†Ô∏è  App backup skipped"
          
              if [ -d "${DOCS_PATH}" ] && [ "$(ls -A ${DOCS_PATH})" ]; then
                cd ${DOCS_PATH}
                tar -czf ${BACKUP_DIR}/backup-docs-${TIMESTAMP}.tar.gz . 2>/dev/null || echo "‚ö†Ô∏è  Docs backup skipped"
              fi
          
              echo "‚úÖ Backups created"
          
              # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ = 10 —Ñ–∞–π–ª–æ–≤)
              cd ${BACKUP_DIR}
              ls -t backup-*.tar.gz | tail -n +11 | xargs -r rm
              echo "‚úÖ Old backups cleaned"
            else
              echo "‚ö†Ô∏è  No existing installation found, skipping backup"
            fi
          
            # ============================================
            # SAVE IMPORTANT FILES
            # ============================================
            echo ""
            echo "üíæ Saving important files..."
          
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º .env
            if [ -f "${APP_PATH}/.env" ]; then
              cp ${APP_PATH}/.env /tmp/.env.backup
              echo "‚úÖ .env backed up"
            fi
          
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º storage
            if [ -d "${APP_PATH}/storage" ]; then
              mkdir -p /tmp/storage-backup
              if [ -d "${APP_PATH}/storage/app" ]; then
                cp -r ${APP_PATH}/storage/app /tmp/storage-backup/ 2>/dev/null || true
                echo "‚úÖ storage/app backed up"
              fi
              if [ -d "${APP_PATH}/storage/logs" ]; then
                cp -r ${APP_PATH}/storage/logs /tmp/storage-backup/ 2>/dev/null || true
                echo "‚úÖ storage/logs backed up"
              fi
            fi
          
            # ============================================
            # EXTRACT APPLICATION FILES
            # ============================================
            echo ""
            echo "üìÇ Extracting application files..."
            cd ${APP_PATH}
            tar -xzf /tmp/yapaket-app.tar.gz
            rm /tmp/yapaket-app.tar.gz
            echo "‚úÖ Application extracted to ${APP_PATH}"
          
            # ============================================
            # EXTRACT PUBLIC FILES TO DOCS
            # ============================================
            echo ""
            echo "üìÇ Extracting public files to docs..."
          
            # –û—á–∏—â–∞–µ–º docs, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º .htaccess –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if [ -f "${DOCS_PATH}/.htaccess" ]; then
              cp ${DOCS_PATH}/.htaccess /tmp/.htaccess.backup
            fi
          
            cd ${DOCS_PATH}
            rm -rf *
          
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º public –≤ docs
            tar -xzf /tmp/yapaket-public.tar.gz --strip-components=1
            rm /tmp/yapaket-public.tar.gz
          
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º .htaccess –µ—Å–ª–∏ –±—ã–ª
            if [ -f "/tmp/.htaccess.backup" ]; then
              mv /tmp/.htaccess.backup ${DOCS_PATH}/.htaccess
              echo "‚úÖ .htaccess restored"
            fi
          
            echo "‚úÖ Public files extracted to ${DOCS_PATH}"
          
            # ============================================
            # RESTORE IMPORTANT FILES
            # ============================================
            echo ""
            echo "‚ôªÔ∏è  Restoring important files..."
          
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º .env
            if [ -f "/tmp/.env.backup" ]; then
              mv /tmp/.env.backup ${APP_PATH}/.env
              echo "‚úÖ .env restored"
            fi
          
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º storage/app
            if [ -d "/tmp/storage-backup/app" ]; then
              mkdir -p ${APP_PATH}/storage/app
              cp -r /tmp/storage-backup/app/* ${APP_PATH}/storage/app/ 2>/dev/null || true
              echo "‚úÖ storage/app restored"
            fi
          
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º storage/logs
            if [ -d "/tmp/storage-backup/logs" ]; then
              mkdir -p ${APP_PATH}/storage/logs
              cp -r /tmp/storage-backup/logs/* ${APP_PATH}/storage/logs/ 2>/dev/null || true
              echo "‚úÖ storage/logs restored"
            fi
          
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            rm -rf /tmp/storage-backup
          
            # ============================================
            # CONFIGURE ENVIRONMENT
            # ============================================
            echo ""
            echo "üîß Configuring environment..."
            cd ${APP_PATH}
          
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º production environment
            if [ -f ".env" ]; then
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º APP_ENV=production
              if grep -q "^APP_ENV=" .env; then
                sed -i 's/^APP_ENV=.*/APP_ENV=production/' .env
              else
                echo "APP_ENV=production" >> .env
              fi
              echo "‚úÖ APP_ENV=production set"
          
              # –î–æ–±–∞–≤–ª—è–µ–º PUBLIC_PATH –¥–ª—è —è–≤–Ω–æ—Å—Ç–∏
              if ! grep -q "^PUBLIC_PATH=" .env; then
                echo "PUBLIC_PATH=docs" >> .env
                echo "‚úÖ PUBLIC_PATH=docs added to .env"
              fi
          
              # –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º DATABASE_URL –µ—Å–ª–∏ –µ—Å—Ç—å (—á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ DB_ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
              sed -i '/^DATABASE_URL=/d' .env
              echo "‚úÖ DATABASE_URL removed (using separate DB_ variables)"
          
              # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
              echo ""
              echo "Current database settings:"
              grep "^DB_" .env || echo "No DB_ variables found!"
            fi
          
            # ============================================
            # CREATE STORAGE SYMLINK
            # ============================================
            echo ""
            echo "üîó Creating storage symlink..."
          
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–∏–º–ª–∏–Ω–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            if [ -L "${DOCS_PATH}/storage" ]; then
              rm ${DOCS_PATH}/storage
            fi
          
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∏–º–ª–∏–Ω–∫
            ln -s ${APP_PATH}/storage/app/public ${DOCS_PATH}/storage
            echo "‚úÖ Storage symlink created: ${DOCS_PATH}/storage -> ${APP_PATH}/storage/app/public"
          
            # ============================================
            # SET PERMISSIONS
            # ============================================
            echo ""
            echo "üîí Setting permissions..."
            cd ${APP_PATH}
          
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ storage
            mkdir -p storage/framework/cache/data
            mkdir -p storage/framework/sessions
            mkdir -p storage/framework/views
            mkdir -p storage/logs
            mkdir -p storage/app/public
            mkdir -p bootstrap/cache
          
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
            chmod -R 755 storage bootstrap/cache docs
            chmod -R 775 storage/framework
            chmod -R 775 storage/logs
            chmod -R 775 storage/app/public
          
            echo "‚úÖ Permissions set"
          
            # ============================================
            # RUN LARAVEL COMMANDS
            # ============================================
            echo ""
            echo "‚öôÔ∏è  Running Laravel commands..."
            cd ${APP_PATH}
          
            # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–µ—à–µ–π –∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            echo "Clearing all caches and compiled files..."
            php artisan cache:clear 2>/dev/null || true
            php artisan config:clear 2>/dev/null || true
            php artisan route:clear 2>/dev/null || true
            php artisan view:clear 2>/dev/null || true
          
            # –£–¥–∞–ª—è–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤—Ä—É—á–Ω—É—é
            rm -f bootstrap/cache/config.php
            rm -f bootstrap/cache/routes-v7.php
            rm -f bootstrap/cache/packages.php
            rm -f bootstrap/cache/services.php
            echo "‚úÖ All caches and compiled files cleared"
          
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            echo ""
            echo "Testing database connection..."
            php artisan db:show 2>/dev/null || echo "‚ö†Ô∏è  Could not show database info"
          
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            echo ""
            echo "Running migrations..."
            php artisan migrate --force
            echo "‚úÖ Migrations completed"
          
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–µ—à
            echo ""
            echo "Building optimized cache..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            echo "‚úÖ Cache optimized"
          
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è autoloader
            echo ""
            echo "Optimizing autoloader..."
            composer dump-autoload --optimize --no-dev --quiet
            echo "‚úÖ Autoloader optimized"
          
            # ============================================
            # RELOAD PHP-FPM
            # ============================================
            echo ""
            echo "üîÑ Reloading PHP-FPM..."
            if command -v systemctl &> /dev/null; then
              if sudo -n systemctl reload php8.4-fpm 2>/dev/null; then
                echo "‚úÖ PHP-FPM reloaded"
              else
                echo "‚ö†Ô∏è  PHP-FPM reload skipped (no sudo access)"
              fi
            else
              echo "‚ö†Ô∏è  systemctl not available, skipping PHP-FPM reload"
            fi
          
            # ============================================
            # CLEANUP
            # ============================================
            echo ""
            echo "üßπ Cleaning up..."
            cd ${APP_PATH}
          
            # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
            rm -rf tests
            rm -f phpunit.xml
          
            echo "‚úÖ Cleanup completed"
          
            # ============================================
            # DEPLOYMENT SUMMARY
            # ============================================
            echo ""
            echo "================================================"
            echo "‚úÖ Deployment completed successfully!"
            echo "================================================"
            echo ""
            echo "üìä Deployment info:"
            echo "  - Timestamp: ${TIMESTAMP}"
            echo "  - App path: ${APP_PATH}"
            echo "  - Docs path: ${DOCS_PATH}"
            echo "  - Environment: production"
            echo "  - Backup: ${BACKUP_DIR}/backup-*-${TIMESTAMP}.tar.gz"
            echo ""
            echo "üåê Website: https://yapaket.ru"
            echo ""
          ENDSSH

      # ============================================
      # 11. VERIFY DEPLOYMENT
      # ============================================
      - name: ‚úÖ Verify deployment
        run: |
          echo "Checking website status..."
          sleep 5
          HTTP_CODE=$(curl -o /dev/null -s -w "%{http_code}\n" https://yapaket.ru)
          if [ "$HTTP_CODE" == "200" ] || [ "$HTTP_CODE" == "301" ] || [ "$HTTP_CODE" == "302" ]; then
            echo "‚úÖ Website is accessible (HTTP $HTTP_CODE)"
          else
            echo "‚ö†Ô∏è  Website returned HTTP $HTTP_CODE"
            exit 1
          fi

      # ============================================
      # 12. NOTIFY SUCCESS
      # ============================================
      - name: üéâ Deployment successful
        run: |
          echo "================================================"
          echo "üéâ DEPLOYMENT SUCCESSFUL!"
          echo "================================================"
          echo ""
          echo "üåê Website: https://yapaket.ru"
          echo "üìÖ Date: $(date)"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo ""
          echo "üìã Deployed changes:"
          git log -1 --pretty=format:"  %s" ${{ github.sha }}
          echo ""
          echo ""